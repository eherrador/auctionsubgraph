// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionEnded extends ethereum.Event {
  get params(): AuctionEnded__Params {
    return new AuctionEnded__Params(this);
  }
}

export class AuctionEnded__Params {
  _event: AuctionEnded;

  constructor(event: AuctionEnded) {
    this._event = event;
  }

  get orderNumber(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get initialVoucherId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get finalVoucherId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class HighestBidIncreased extends ethereum.Event {
  get params(): HighestBidIncreased__Params {
    return new HighestBidIncreased__Params(this);
  }
}

export class HighestBidIncreased__Params {
  _event: HighestBidIncreased;

  constructor(event: HighestBidIncreased) {
    this._event = event;
  }

  get bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OrderBuyed extends ethereum.Event {
  get params(): OrderBuyed__Params {
    return new OrderBuyed__Params(this);
  }
}

export class OrderBuyed__Params {
  _event: OrderBuyed;

  constructor(event: OrderBuyed) {
    this._event = event;
  }

  get orderNumber(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get initialVoucherId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get finalVoucherId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Auction extends ethereum.SmartContract {
  static bind(address: Address): Auction {
    return new Auction("Auction", address);
  }

  auctionEndTime(): BigInt {
    let result = super.call("auctionEndTime", "auctionEndTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_auctionEndTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionEndTime",
      "auctionEndTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  beneficiary(): Address {
    let result = super.call("beneficiary", "beneficiary():(address)", []);

    return result[0].toAddress();
  }

  try_beneficiary(): ethereum.CallResult<Address> {
    let result = super.tryCall("beneficiary", "beneficiary():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentPrice(): BigInt {
    let result = super.call("currentPrice", "currentPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentPrice", "currentPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAuctionEndTime(): BigInt {
    let result = super.call(
      "getAuctionEndTime",
      "getAuctionEndTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAuctionEndTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAuctionEndTime",
      "getAuctionEndTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBlockTimestamp(): BigInt {
    let result = super.call(
      "getBlockTimestamp",
      "getBlockTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBlockTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBlockTimestamp",
      "getBlockTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBuyNowPrice(): BigInt {
    let result = super.call("getBuyNowPrice", "getBuyNowPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBuyNowPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBuyNowPrice",
      "getBuyNowPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHighestBid(): BigInt {
    let result = super.call("getHighestBid", "getHighestBid():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getHighestBid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getHighestBid",
      "getHighestBid():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHighestBidder(): Address {
    let result = super.call(
      "getHighestBidder",
      "getHighestBidder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getHighestBidder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getHighestBidder",
      "getHighestBidder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  highestBid(): BigInt {
    let result = super.call("highestBid", "highestBid():(uint256)", []);

    return result[0].toBigInt();
  }

  try_highestBid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("highestBid", "highestBid():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  highestBidder(): Address {
    let result = super.call("highestBidder", "highestBidder():(address)", []);

    return result[0].toAddress();
  }

  try_highestBidder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "highestBidder",
      "highestBidder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdraw(): boolean {
    let result = super.call("withdraw", "withdraw():(bool)", []);

    return result[0].toBoolean();
  }

  try_withdraw(): ethereum.CallResult<boolean> {
    let result = super.tryCall("withdraw", "withdraw():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get numberOfOrder(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get initialId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get finalId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get orderPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get buyNowPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get biddingTime(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuctionEndCall extends ethereum.Call {
  get inputs(): AuctionEndCall__Inputs {
    return new AuctionEndCall__Inputs(this);
  }

  get outputs(): AuctionEndCall__Outputs {
    return new AuctionEndCall__Outputs(this);
  }
}

export class AuctionEndCall__Inputs {
  _call: AuctionEndCall;

  constructor(call: AuctionEndCall) {
    this._call = call;
  }
}

export class AuctionEndCall__Outputs {
  _call: AuctionEndCall;

  constructor(call: AuctionEndCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get valueBid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class BuyNowCall extends ethereum.Call {
  get inputs(): BuyNowCall__Inputs {
    return new BuyNowCall__Inputs(this);
  }

  get outputs(): BuyNowCall__Outputs {
    return new BuyNowCall__Outputs(this);
  }
}

export class BuyNowCall__Inputs {
  _call: BuyNowCall;

  constructor(call: BuyNowCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyNowCall__Outputs {
  _call: BuyNowCall;

  constructor(call: BuyNowCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
