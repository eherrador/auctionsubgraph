// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AuctionEnded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AuctionEnded entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AuctionEnded entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AuctionEnded", id.toString(), this);
  }

  static load(id: string): AuctionEnded | null {
    return store.get("AuctionEnded", id) as AuctionEnded | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get orderNumber(): BigInt {
    let value = this.get("orderNumber");
    return value.toBigInt();
  }

  set orderNumber(value: BigInt) {
    this.set("orderNumber", Value.fromBigInt(value));
  }

  get initialVoucherId(): BigInt {
    let value = this.get("initialVoucherId");
    return value.toBigInt();
  }

  set initialVoucherId(value: BigInt) {
    this.set("initialVoucherId", Value.fromBigInt(value));
  }

  get finalVoucherId(): BigInt {
    let value = this.get("finalVoucherId");
    return value.toBigInt();
  }

  set finalVoucherId(value: BigInt) {
    this.set("finalVoucherId", Value.fromBigInt(value));
  }

  get winner(): Bytes {
    let value = this.get("winner");
    return value.toBytes();
  }

  set winner(value: Bytes) {
    this.set("winner", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class HighestBidIncreased extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save HighestBidIncreased entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save HighestBidIncreased entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("HighestBidIncreased", id.toString(), this);
  }

  static load(id: string): HighestBidIncreased | null {
    return store.get("HighestBidIncreased", id) as HighestBidIncreased | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bidder(): Bytes {
    let value = this.get("bidder");
    return value.toBytes();
  }

  set bidder(value: Bytes) {
    this.set("bidder", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class OrderBuyed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OrderBuyed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OrderBuyed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OrderBuyed", id.toString(), this);
  }

  static load(id: string): OrderBuyed | null {
    return store.get("OrderBuyed", id) as OrderBuyed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get orderNumber(): BigInt {
    let value = this.get("orderNumber");
    return value.toBigInt();
  }

  set orderNumber(value: BigInt) {
    this.set("orderNumber", Value.fromBigInt(value));
  }

  get initialVoucherId(): BigInt {
    let value = this.get("initialVoucherId");
    return value.toBigInt();
  }

  set initialVoucherId(value: BigInt) {
    this.set("initialVoucherId", Value.fromBigInt(value));
  }

  get finalVoucherId(): BigInt {
    let value = this.get("finalVoucherId");
    return value.toBigInt();
  }

  set finalVoucherId(value: BigInt) {
    this.set("finalVoucherId", Value.fromBigInt(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}
